#pragma once

typedef struct decal_param_s {
    /* テクスチャID
     *   テクスチャID
     * Texture ID
     *   Texture ID
     * Default Value  = -1 */
    int textureId;

    /* ダミポリID
     *   デカール発生基準のダミポリID。TAEで指定している場合はTAEの値になる
     * Dummy Poly ID
     *   Damipoly ID of decal generation standard. If specified by TAE, it will be the value of TAE.
     * Default Value  = -1 */
    int dmypolyId;

    /* 基準角度オフセット_上下[deg]
     *   基準角度オフセット_上下[deg]
     * Reference Angle Offset Pitch
     *   Reference angle offset_up / down [deg] */
    float pitchAngle;

    /* 基準角度オフセット_左右[deg]
     *   基準角度オフセット_左右[deg]
     * Reference Angle Offset Yaw
     *   Reference angle offset_left / right [deg] */
    float yawAngle;

    /* 貼り付け開始距離[m]
     *   貼り付け開始距離[m]
     * Paste Start Distance
     *   Pasting start distance [m] */
    float nearDistance;

    /* 貼り付け終了距離[m]
     *   貼り付け終了距離[m]
     * Paste End Distance
     *   Paste end distance [m] */
    float farDistance;

    /* 開始距離での大きさ[m]
     *   開始距離での大きさ[m]
     * Start Distance Size
     *   Size at the start distance */
    float nearSize;

    /* 終了距離での大きさ[m]
     *   終了距離での大きさ[m]
     * End Distance Size
     *   Size at the end distance [m] */
    float farSize;

    /* 監視特殊効果ID
     *   監視特殊効果ID。任意の特殊効果IDを入れた場合、その特殊効果がかかっていないとデカールを発生しなくなる。
     * Mask SpEffect ID
     *   Monitoring special effect ID. If you enter an arbitrary special effect ID, decals will not be generated unless the special effect is applied.
     * Default Value  = -1 */
    int maskSpeffectId;

    /* パディング
     *   パディング */
    unsigned int pad_10:4;

    /* 材質によるテクスチャ差し替え
     *   攻撃のヒットで発生させるときに1で防御材質によってテクスチャを変える。新しいテクスチャID=血材質ID*10000000+元のテクスチャID
     * Texture Replacement by Material
     *   When it is generated by an attack hit, 1 changes the texture depending on the defense material. New Texture ID = Blood Material ID * 10000000 + Original Texture ID */
    unsigned int replaceTextureId_byMaterial:1;

    /* ダミポリ検索場所
     *   ダミポリ検索場所 0:本体 1:左手武器 2:右手武器
     * Dummy Poly Search Location
     *   Damipoli Search Location 0 Body 1 Left Hand Weapon 2 Right Hand Weapon */
    unsigned int dmypolyCategory:2;

    /* パディング
     *   パディング */
    unsigned int pad_05:4;

    /* デファード
     *   1でデファードデカールとして機能する
     * Use Deferred Decal
     *   Acts as a deferred decal at 1
     * Default Value  = 1 */
    unsigned int useDeferredDecal:1;

    /* ペイント
     *   1でペイントデカールとして機能する
     * Use Paint Decal
     *   Acts as a paint decal at 1
     * Default Value  = 1 */
    unsigned int usePaintDecal:1;

    /* 流血表現
     *   オプションの流血表現の影響を受けるか、マイルドでIDが+1000される、非表示だと貼り付けない
     * Blood Type Enable
     *   Affected by optional bloody expression, ID is +1000 in mild, do not paste if hidden */
    unsigned int bloodTypeEnable:1;

    /* ノーマル成分を使用するか
     *   ノーマル成分を使用するなら1（ノーマルとシャイニネスのテクスチャ統合対応）
     * Use Normal Component
     *   1 if normal component is used (compatible with normal and shinyness texture integration) */
    unsigned int bUseNormal:1;

    /* パディング
     *   パディング */
    unsigned int pad_08:1;

    /* パディング
     *   パディング */
    unsigned int pad_09:1;

    /* POMを有効にするか
     *   POMを有効にするか
     * Enable POM
     *   Whether to enable POM */
    unsigned int usePom:1;

    /* エミッシブを更新するか
     *   エミッシブを更新するか
     * Enable Emissive
     *   Whether to update emissive */
    unsigned int useEmissive:1;

    /* 垂直に貼り付けるか
     *   垂直に貼り付けるか
     * Enable Vertical Paste
     *   Whether to paste vertically */
    unsigned int putVertical:1;

    /* ランダムスケール最小値[％]
     *   ランダムスケール最小値[％]
     * Random Scale % - Min
     *   Random scale minimum [%]
     * Default Value  = 100 */
    short randomSizeMin;

    /* ランダムスケール最大値[％]
     *   ランダムスケール最大値[％]
     * Random Scale % - Max
     *   Random scale maximum [%]
     * Default Value  = 100 */
    short randomSizeMax;

    /* ランダム角度_ひねり最小値[deg]
     *   ランダム角度_ひねり最小値[deg]
     * Random Angle Roll - Min
     *   Random angle_minimum twist [deg] */
    float randomRollMin;

    /* ランダム角度_ひねり最大値[deg]
     *   ランダム角度_ひねり最大値[deg]
     * Random Angle Roll - Max
     *   Random angle _ maximum twist [deg] */
    float randomRollMax;

    /* ランダム角度_上下最小値[deg]
     *   ランダム角度_上下最小値[deg]
     * Random Angle Pitch - Min
     *   Random angle_minimum top and bottom [deg] */
    float randomPitchMin;

    /* ランダム角度_上下最大値[deg]
     *   ランダム角度_上下最大値[deg]
     * Random Angle Pitch - Max
     *   Random angle_maximum value [deg] */
    float randomPitchMax;

    /* ランダム角度_左右最小値[deg]
     *   ランダム角度_左右最小値[deg]
     * Random Angle Yaw - Min
     *   Random angle_minimum left and right [deg] */
    float randomYawMin;

    /* ランダム角度_左右最大値[deg]
     *   ランダム角度_左右最大値[deg]
     * Random Angle Yaw - Max
     *   Random angle_maximum left and right [deg] */
    float randomYawMax;

    /* POM高さスケール
     *   POM高さスケール
     * POM Height Scale
     *   POM height scale
     * Default Value  = 1 */
    float pomHightScale;

    /* POM最小サンプル数
     *   POM最小サンプル数
     * POM Sample - Minimum Count
     *   Minimum number of POM samples
     * Default Value  = 8 */
    unsigned char pomSampleMin;

    /* POM最大サンプル数
     *   POM最大サンプル数
     * POM Sample - Maximum Count
     *   Maximum number of POM samples
     * Default Value  = 64 */
    unsigned char pomSampleMax;

    /* ブレンドモード
     *   ブレンドモード
     * Blend Mode
     *   Blend mode
     * Default Value  = 1 */
    char blendMode;

    /* デカールを飛ばす基準座標
     *   デカールを飛ばす方向を決定する基準座標
     * Appearance Direction Type
     *   Reference coordinates that determine the direction in which the decal is flown */
    char appearDirType;

    /* エミッシブ 開始値
     *   エミッシブ 開始値
     * Emissive Value Start
     *   Emissive starting price
     * Default Value  = 1 */
    float emissiveValueBegin;

    /* エミッシブ 終了値
     *   エミッシブ 終了値
     * Emissive Value End
     *   Emissive end value
     * Default Value  = 1 */
    float emissiveValueEnd;

    /* エミッシブ 更新時間(秒)
     *   開始値～終了値の補間時間
     * Emissive Update Time
     *   Interpolation time from start value to end value */
    float emissiveTime;

    /* 補間するか？
     *   TAEのデカル発生でバーを伸ばしてる時間発生させるか？
     * Enable Interpolation
     *   Do you generate the time when the bar is extended due to the decal generation of TAE? */
    unsigned char bIntpEnable;

    /* パディング
     *   パディング */
    char pad_01[3];

    /* 補間間隔[m]
     *   補間有効時にTAEのバーの間で発生したデカルを補間する距離
     * Interpolation Interval Distance
     *   Distance to interpolate decals generated between TAE bars when interpolation is enabled
     * Default Value  = 0.1 */
    float intpIntervalDist;

    /* 補間開始時のテクスチャID
     *   補間開始時のテクスチャID（-1でテクスチャIDと同じ値を使う）
     * Interpolation Start - Texture ID
     *   Texture ID at the start of interpolation (-1 uses the same value as the texture ID)
     * Default Value  = -1 */
    int beginIntpTextureId;

    /* 補間終了時のテクスチャID
     *   補間終了時のテクスチャテクスチャID（-1でテクスチャIDと同じ値を使う）
     * Interpolation End - Texture ID
     *   Texture at the end of interpolation Texture ID (-1 uses the same value as the texture ID)
     * Default Value  = -1 */
    int endIntpTextureId;

    /* デカールが貼られた時に出すSFXID
     *   デカールが貼られた時に出すSFXID（-1で何も出さない）
     * Appearance SFX ID
     *   SFXID issued when the decal is affixed (Nothing is issued with -1)
     * Default Value  = -1 */
    int appearSfxId;

    /* SFXのオフセット位置
     *   SFX発生位置のオフセット距離
     * Appearance SFX Offset Position
     *   Offset distance of SFX generation position */
    float appearSfxOffsetPos;

    /* マスクテクスチャID
     *   マスクテクスチャID（-1でテクスチャIDを見る）
     * Mask Texture ID
     *   Mask texture ID (see texture ID with -1)
     * Default Value  = -1 */
    int maskTextureId;

    /* アルベドテクスチャID
     *   アルベドテクスチャID（-1でテクスチャIDを見る）
     * Diffuse Texture ID
     *   Albedo Texture ID (See Texture ID with -1)
     * Default Value  = -1 */
    int diffuseTextureId;

    /* リフレクテクスチャID
     *   リフレクタンステクスチャID（-1でテクスチャIDを見る）
     * Reflect Texture ID
     *   Reflectance texture ID (see texture ID with -1)
     * Default Value  = -1 */
    int reflecTextureId;

    /* マスクの強さ
     *   マスクの強さ（現状、デファードデカールでのみ有効）
     * Mask Strength Scale
     *   Mask strength (currently valid only with deferred decals)
     * Default Value  = 1 */
    float maskScale;

    /* ノーマルテクスチャID
     *   ノーマルテクスチャID（-1でテクスチャIDを見る）
     * Normal Texture ID
     *   Normal texture ID (see texture ID with -1)
     * Default Value  = -1 */
    int normalTextureId;

    /* ハイトテクスチャID
     *   ハイトテクスチャID（-1でテクスチャIDを見る）
     * Height Texture ID
     *   Height texture ID (see texture ID with -1)
     * Default Value  = -1 */
    int heightTextureId;

    /* エミッシブテクスチャID
     *   エミッシブテクスチャID（-1でテクスチャIDを見る）
     * Emissive Texture ID
     *   Emissive Texture ID (See Texture ID with -1)
     * Default Value  = -1 */
    int emissiveTextureId;

    /* アルベドカラー：R
     *   アルベドの色：R
     * Diffuse Color R
     *   Albedo color R
     * Default Value  = 255 */
    unsigned char diffuseColorR;

    /* アルベドカラー：G
     *   アルベドの色：G
     * Diffuse Color G
     *   Albedo color G
     * Default Value  = 255 */
    unsigned char diffuseColorG;

    /* アルベドカラー：B
     *   アルベドの色：B
     * Diffuse Color B
     *   Albedo color B
     * Default Value  = 255 */
    unsigned char diffuseColorB;

    /* パディング
     *   パディング */
    char pad_03[1];

    /* リフレクカラー：R
     *   リフレクの色：R
     * Reflection Color R
     *   Reflect color R
     * Default Value  = 255 */
    unsigned char reflecColorR;

    /* リフレクカラー：G
     *   リフレクの色：G
     * Reflection Color G
     *   Reflect color G
     * Default Value  = 255 */
    unsigned char reflecColorG;

    /* リフレクカラー：B
     *   リフレクの色：B
     * Reflection Color B
     *   Reflect color B
     * Default Value  = 255 */
    unsigned char reflecColorB;

    /* 寿命が有効か
     *   寿命が有効か
     * Life Enable
     *   Is the life effective? */
    unsigned char bLifeEnable;

    /* シャイニネスの強さ
     *   シャイニネスの強さ
     * Shininess Scale
     *   The strength of shinyness
     * Default Value  = 1 */
    float siniScale;

    /* 寿命[秒]
     *   寿命[秒]（デカールが貼られてからの時間、フェードイン時間は関係ない）
     * Decal Duration
     *   Lifespan [seconds] (Time after decal is applied, fade-in time does not matter) */
    float lifeTimeSec;

    /* フェードアウト時間[秒]
     *   フェードアウト時間[秒]
     * Decal Fadeout Time
     *   Fade out time [seconds] */
    float fadeOutTimeSec;

    /* 優先度
     *   この値が大きいほど残りやすい（-1は消滅しない）
     * Decal Priority
     *   The larger this value, the easier it is to remain (-1 does not disappear)
     * Default Value  = -1 */
    short priority;

    /* 近くにデカールがあれば間引くか
     *   近くにデカールがあれば間引くかどうか
     * Thin Out Nearby Decal
     *   Whether to thin out if there is a decal nearby */
    unsigned char bDistThinOutEnable;

    /* ランダムパターンを固定化する
     *   「はい」にすると、各バリエーション数が0以外のテクスチャについてランダムに決めた一つのバリエーション番号が適用されるようになります。0以外の各バリエーション数は同じ値に揃える必要があります。
     * Enable Aligned Texture Random Variation
     *   If you select Yes, one variation number randomly determined for each texture other than 0 will be applied. The number of non-zero variations must be the same. */
    unsigned char bAlignedTexRandomVariationEnable;

    /* この距離以内なら間引き候補
     *   この距離以内にデカールがあれば間引き候補
     * Decal Thin Out - Check Distance
     *   Candidates for thinning if there is a decal within this distance */
    float distThinOutCheckDist;

    /* 方向の差がこの角度[度]以内なら間引き候補
     *   デカールの方向の差がこの角度以内なら間引き候補
     * Decal Thin Out - Check Angle
     *   Candidates for thinning if the difference in decal direction is within this angle */
    float distThinOutCheckAngleDeg;

    /* 条件を満たした数がこの数以上なら間引く
     *   距離、角度がこの数以上なら間引く
     * Decal Thin Out - Max Count
     *   If the distance and angle are more than this number, thin out
     * Default Value  = 1 */
    unsigned char distThinOutMaxNum;

    /* 直近何個まで間引きチェックするか
     *   間引き候補を直近何個まで調べるか
     * Decal Thin Out - Check Count
     *   How many recent thinning candidates to check
     * Default Value  = 1 */
    unsigned char distThinOutCheckNum;

    /* 発生するまでの遅延フレーム[フレーム（30FPS換算）]
     *   デカールを貼り付けようとしてからこのフレーム後に実際に貼り付けられる
     * Decal Spawn Delay
     *   After trying to paste the decal, it will actually be pasted after this frame */
    short delayAppearFrame;

    /* アルベド・バリエーション数
     *   アルベドテクスチャのランダムバリエーション数（0番目を含む、2でテクスチャ2枚分）
     * Random Variation - Diffuse
     *   Number of random variations of albedo texture (including 0th, 2 for 2 textures) */
    unsigned int randVaria_Diffuse:4;

    /* マスク・バリエーション数
     *   マスクテクスチャのランダムバリエーション数（0番目を含む、2でテクスチャ2枚分）
     * Random Variation - Mask
     *   Number of random variations of mask texture (including 0th, 2 for 2 textures) */
    unsigned int randVaria_Mask:4;

    /* リフレク・バリエーション数
     *   リフレクテクスチャのランダムバリエーション数（0番目を含む、2でテクスチャ2枚分）
     * Random Variation - Reflect
     *   Number of random variations of reflex textures (including 0th, 2 for 2 textures) */
    unsigned int randVaria_Reflec:4;

    /* パディング
     * Padding */
    unsigned int pad_12:4;

    /* ノーマル・バリエーション数
     *   ノーマルテクスチャのランダムバリエーション数（0番目を含む、2でテクスチャ2枚分）
     * Random Variation - Normal
     *   Number of random variations of normal texture (including 0th, 2 for 2 textures) */
    unsigned int randVaria_Normal:4;

    /* ハイト・バリエーション数
     *   ハイトテクスチャのランダムバリエーション数（0番目を含む、2でテクスチャ2枚分）
     * Random Variation - Height
     *   Number of random variations of height texture (including 0th, 2 for 2 textures) */
    unsigned int randVaria_Height:4;

    /* エミッシブ・バリエーション数
     *   エミッシブテクスチャのランダムバリエーション数（0番目を含む、2でテクスチャ2枚分）
     * Random Variation - Emissive
     *   Number of random variations of emissive textures (including 0th, 2 for 2 textures) */
    unsigned int randVaria_Emissive:4;

    /* パディング
     *   パディング */
    unsigned int pad_11:4;

    /* フェードイン時間[秒]
     *   フェードイン時間[秒]
     * Fade In Spawn Delay
     *   Fade-in time [seconds] */
    float fadeInTimeSec;

    /* 間引き:重複乗算値
     *   デカールサイズにこの値を乗算した範囲で重複かを判定する
     * Thin Out - Overlap Multiplier Radius
     *   Determine if the decal size is duplicated by multiplying it by this value. */
    float thinOutOverlapMultiRadius;

    /* 間引き:近隣加算距離[m]
     *   デカールサイズにこの距離[m]を加算した範囲で近隣かを判定する
     * Thin Out - Neighbor Addition Radius
     *   Judge whether it is a neighborhood within the range of adding this distance [m] to the decal size. */
    float thinOutNeighborAddRadius;

    /* 間引き:重複限界数
     *   重複可能な限界数
     * Thin Out - Overlap Limit Number
     *   Limit number that can be duplicated */
    unsigned int thinOutOverlapLimitNum;

    /* 間引き:近隣限界数
     *   近隣可能な限界数
     * Thin Out - Neighbor Limit Number
     *   Maximum number of neighbors */
    unsigned int thinOutNeighborLimitNum;

    /* 間引きモード
     *   間引きモード
     * Thin Out Mode
     *   Thinning mode */
    char thinOutMode;

    /* エミッシブカラー：R
     *   エミッシブの色：R
     * Emissive Color R
     *   Emissive color R
     * Default Value  = 255 */
    unsigned char emissiveColorR;

    /* エミッシブカラー：G
     *   エミッシブの色：G
     * Emissive Color G
     *   Emissive color G
     * Default Value  = 255 */
    unsigned char emissiveColorG;

    /* エミッシブカラー：B
     *   エミッシブの色：B
     * Emissive Color B
     *   Emissive color B
     * Default Value  = 255 */
    unsigned char emissiveColorB;

    /* SFX発生上限角度
     *   SFX発生上限角度
     * Decal SFX Creation Max Angle
     *   SFX generation upper limit angle
     * Default Value  = -1 */
    float maxDecalSfxCreatableSlopeAngleDeg;

    /* パディング
     *   パディング */
    char pad_02[40];
} decal_param_t;
